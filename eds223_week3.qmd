---
title: "eds223_week3"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
library(sf)
library(tmap)
library(tidyverse)
library(spData)
```

```{r}
nz <- spData::nz
nz_height <- spData::nz_height
canterbury <- nz %>%
  filter(Name == "Canterbury")

tm_shape(nz) +
  tm_polygons() +
  tm_shape(canterbury) +
  tm_fill(col="darkgray") +
  tm_shape(nz_height) +
  tm_dots(col="red")
```

```{r}
# simple bracket subsetting
c_height1 <- nz_height[canterbury, ] # leaving a comma blank because we want all columns

# st_filter()
c_height2 <- nz_height %>%
  st_filter(y = canterbury, .predicate = st_intersects)

# creating logical vector based on st_intersects()
nz_height_sgbp <- st_intersects(x = nz_height, y= canterbury)
nz_height_logical <- lengths(nz_height_sgbp) > 0
c_height3 <- nz_height[nz_height_logical, ] # leaving a blank because we want all columns
```

```{r}
nz_height_logical <- st_is_within_distance(nz_height, canterbury,
                      dist = units::set_units(1000, "km"),
                      sparse = FALSE)

c_height4 <- nz_height[nz_height_logical, ]
```

## Spatial joins

```{r}
st_join(nz_height, nz, join = st_intersects) %>%
  select(id = t50_fid, elevation, region = Name) %>%
  group_by(region) %>%
  summarize(n_points = n()) %>%
  st_drop_geometry()
```

```{r}
cycle_hire <- spData::cycle_hire
cycle_hire
cycle_hire_osm

tmap_mode('view')

tm_shape(cycle_hire) +
  tm_symbols(col = "red", alpha = 0.2) +
  tm_shape(cycle_hire_osm) +
  tm_symbols(col= "blue", alpha = 0.2)
```

```{r}
cycle_hire_join <- st_join(cycle_hire, cycle_hire_osm,
        st_is_within_distance,
        dist = units::set_units(20, "m"))
```

```{r}
if(nrow(cycle_hire) == nrow(cycle_hire_join)) {
  print("join matches")
} else {
  warning("join does not match original dimensions")
}
```

# Geometry operations
## Aggregating

```{r}
us_states <- spData::us_states
regions <- us_states %>%
  group_by(REGION) %>%
  summarise(population = sum(total_pop_15, na.rm = TRUE))

tmap_mode("plot")

tm_shape(us_states) +
  tm_polygons()

tm_shape(regions) +
  tm_polygons()


```

```{r}
us_west <- us_states[us_states$REGION == 'West', ] 

us_west_union <- st_union(us_west)

texas <- us_states[us_states$NAME == 'Texas', ]
texas_union <- st_union(us_west_union, texas)

tm_shape(texas_union) +
  tm_polygons()
```

## Buffering

```{r}
tmap_mode("plot")

seine <- spData::seine
seine_buffer <- st_buffer(seine, dist = 5000)

seine_union <- st_union(seine_buffer)

tm_shape(seine_union) +
  tm_polygons() +
tm_shape(seine) +
  tm_lines()
```

```{r}
nz_height_buffer <- st_buffer(nz_height, dist = 1000000)

# same as st_filter with st_is_within_distance
c_height5 <- nz_height_buffer %>%
  st_filter(y = canterbury, .predicate = st_intersects)

if(nrow(c_height4) == nrow(c_height5)) {
  print("results match!")
} else {
  print("whoops")
}
```

```{r}
x <- st_sfc(st_point(c(0,1))) %>%
  st_buffer(., dist = 1) %>%
  st_as_sf()

y <- st_sfc(st_point(c(1,1))) %>%
  st_buffer(., dist = 1) %>%
  st_as_sf()

intersection <- st_intersection(x, y)
difference_x_y <- st_difference(x, y)
difference_y_x <- st_difference(y, x)
union <- st_union(x, y)
sym_difference <- st_sym_difference(x, y)

bbox <- st_union(x, y)

tm_shape(x, bbox=bbox) +
  tm_borders(col="red") +
  tm_shape(y) +
  tm_borders(col="blue") +
  tm_shape(intersection) +
  tm_fill(col = "purple")

```

```{r}
bbox <- st_union(x, y)

map1 <- tm_shape(x, bbox = bbox) +
  tm_borders(col = "red") +
  tm_shape(y) +
  tm_borders(col = "blue")

map2 <- map1 +
  tm_shape(intersection, bbox = bbox) +
  tm_fill(col = "purple") +
  tm_layout(title = "st_intersection()")

map3 <- map1 +
  tm_shape(difference_x_y, bbox = bbox) +
  tm_fill(col = "purple") +
  tm_layout(title = "st_difference(x,y)")

map4 <- map1 +
  tm_shape(difference_y_x, bbox = bbox) +
  tm_fill(col = "purple") +
  tm_layout(title = "st_difference(y,x)")

map5 <- map1 +
  tm_shape(union, bbox = bbox) +
  tm_fill(col = "purple") +
  tm_layout(title = "st_union()")

map6 <- map1 +
  tm_shape(sym_difference, bbox = bbox) +
  tm_fill(col = "purple") +
  tm_layout(title = "st_sym_diffference()")

tmap_arrange(map1, map2, map3, map4, map5, map6, nrow = 2)
```

```{r}
# create random points
bb <- st_bbox(st_union(x, y)) # create bounding box of x and y
box <- st_as_sfc(bb)
p <- st_sample(x = box, size = 100) %>% # randomly sample the bounding box
  st_as_sf()

# find intersection of x and y
x_and_y <- st_intersection(x, y)

# filter points
# first approach: bracket subsetting
p_xy1 = p[x_and_y, ]

# second approach: st_filter()
p_xy2 <- p %>%
  st_filter(., x_and_y)

# third approach: st_intersection()
p_xy3 = st_intersection(p, x_and_y)

tm_shape(x, bbox=bbox) +
  tm_borders(col="red") +
  tm_shape(y) +
  tm_borders(col="blue") +
  tm_shape(intersection) +
  tm_fill(col = "purple")
```

```{r}
map2 <- map1 +
  tm_shape(p) +
  tm_dots(alpha = 0.5) +
  tm_layout(main.title = "original")

map3 <- map2 +
  tm_shape(p_xy1) +
  tm_symbols(col = "purple", size = 0.2) +
  tm_layout(main.title = "bracket subsetting")

map4 <- map2 +
  tm_shape(p_xy2) +
  tm_symbols(col = "purple", size = 0.2) +
  tm_layout(main.title = "st_filter()")

map5 <- map2 +
  tm_shape(p_xy3) +
  tm_symbols(col = "purple", size = 0.2) +
  tm_layout(main.title = "st_intersection()")

tmap_arrange(map2, map3, map4, map5, nrow = 2)
```

# Centroids

```{r}
nz_centroid <- st_centroid(nz)
nz_pos <- st_point_on_surface(nz)

tm_shape(nz) +
  tm_polygons() +
  tm_shape(nz_centroid) +
  tm_symbols(col= "red", alpha = 0.5) +
  tm_shape(nz_pos) +
  tm_symbols(col= "blue", alpha = 0.5)
```

```{r}
seine_centroid <- st_centroid(seine)
seine_pos <- st_point_on_surface(seine)

tm_shape(seine) +
  tm_lines() +
  tm_shape(seine_centroid) +
  tm_symbols(col= "red", alpha = 0.5) +
  tm_shape(seine_pos) +
  tm_symbols(col= "blue", alpha = 0.5)
```

## Simplification

```{r}
seine_simple <- st_simplify(seine, dTolerance = 2000)

tm_shape(seine_simple) +
  tm_lines()
```








